import os
import subprocess
import pwd
import grp

from docx import Document
from docx.enum.dml import MSO_THEME_COLOR_INDEX

# Read text file and return as string
def read_file(file_path) -> str:
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r') as file:
                return file.read()
        except IOError as e:
            return f"Error reading file {file_path}: {e}"
    else:
        return f"File not found: {file_path}"

def scan_and_summarize(base_directory):
    # Get the user and group ID for 'transcriptionstream'
    uid = pwd.getpwnam('transcriptionstream').pw_uid
    gid = grp.getgrnam('transcriptionstream').gr_gid

    # Get the OLLAMA_ENDPOINT_IP from environment variables, and fallback default
    ollama_endpoint = os.environ.get('OLLAMA_ENDPOINT', 'http://ollama:11434')

    # Iterate through all items in the base directory
    for item in os.listdir(base_directory):
        path = os.path.join(base_directory, item)

        # Check if the item is a directory
        if os.path.isdir(path):
            # Check for the presence of any .txt and .srt files in the subdirectory
            txt_files = [file for file in os.listdir(path) if file.endswith('.txt')]
            srt_exists = any(file.endswith('.srt') for file in os.listdir(path))

            # If .txt and .srt files exist, check for summary.txt
            if txt_files and srt_exists:
                summary_file = os.path.join(path, 'summary.txt')

                # Check if summary.txt does not exist in the subdirectory
                if not os.path.isfile(summary_file):
                    for txt_file in txt_files:
                        # Print message indicating creation of summary.txt for each .txt file
                        print(f"Creating summary.txt for {txt_file} in {path}")
                        # Call the external script with the directory path and the URL
                        command = f'python3 /root/scripts/ts-summarize.py {path} {ollama_endpoint}'
                        sum_command = subprocess.run(command, shell=True)
                        if sum_command.returncode != 0:
                            print(f"Error creating summary.txt for {txt_file} in {path}")
                            print(sum_command.stderr, sum_command.stdout)
                            # sys.exit(1)
                        else:
                            print(f"Successfully created summary.txt for {txt_file} in {path}")

                            # Change the ownership of the new summary.txt file
                            os.chown(summary_file, uid, gid)
                            
                            # Word doc
                            doc = Document()

                            doc_content = {
                                "Summary": read_file(summary_file),
                                "Transcript": read_file(os.path.join(path, txt_file)),}

                            doc_file = os.path.join(path, os.path.splitext(txt_file)[0]) + ".docx"
                            
                            print(f"Creating word doc {doc_file} for {txt_file} in {path} with {doc_content}")

                            doc.add_heading(f"Transcription of {os.path.basename(path)}", 0)

                            doc.add_paragraph(
                                "Notice: Transcription may contain noise and/or language that is not transcribed. Please check transcription for accuracy. The summary and key points are generated by OpenAI ChatGPT. It can give convincing incorrect statements and all facts must be verified before they are used especially in presentations.",
                                style="Intense Quote",
                            )

                            p = doc.add_paragraph("")

                            for key, value in doc_content.items():
                                # Replace underscores with spaces and capitalize each word for the heading
                                heading = " ".join(word.capitalize() for word in key.split("_"))
                                doc.add_heading(heading, level=1)
                                doc.add_paragraph(value)
                                # Add a line break between sections
                                doc.add_paragraph()
                            doc.save(doc_file)  
                            
                            os.chown(doc_file, uid, gid)
                            
                            # copy all files to new dir
                            for file in os.listdir(path):
                                if not file.endswith('.txt') and not file.endswith('.srt') and not file.endswith('.docx'):
                                    print(f"Copying {file} to {path}")
                                    shutil.copy(os.path.join(path, file), os.path.join(path, file))
                        

# Example usage
# scan_and_summarize('/transcriptionstream/transcribed')
scan_and_summarize('/tmp/transcribed')
